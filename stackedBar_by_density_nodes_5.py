#this code is specifically used for plotting
#a stacked bar graph for the all the zickle files 
#of a fixed number nodes = 5 and varying densities
#which was created using liteqclass


import pylab as pl
import matplotlib as mpl
import seaborn as sns
import numpy as np
import zickle as zkl
from stackedBarGraph import StackedBarGrapher
import traversal, bfutils, graphkit, unknownrate,comparison
import zickle as zkl
from matplotlib import pyplot as plt
from matplotlib import gridspec
import random


UMAX = 3
l = [
'oranos_nodes_5_density_0.25_ral_.zkl',
'oranos_nodes_5_density_0.3_ral_.zkl',
'oranos_nodes_5_density_0.35_ral_.zkl',
'oranos_nodes_5_density_0.4_ral_.zkl',
'jupiter_nodes_5_density_0.45_ral_.zkl',
'neptune_nodes_5_density_0.5_ral_.zkl',
]

densities = [.25,.3,.35,.4,.45,.5]
shift = 0
wds = 0.3
fliersz = 2
lwd = 1

#####################################################################################
def get_counts(d,U):
  eqc = []
  for i in range(0,100):
    if len(d[i]['solutions'])>=U:
    	if d[i]['solutions'][U]['eq']  == set([-1]): #supercliques
		eqc.append(1001)
    	else:
      		eqc.append(len(d[i]['solutions'][U]['eq']))
    else:
	tempu = len(d[i]['solutions'])
    	if d[i]['solutions'][tempu]['eq']  == set([-1]): #supercliques
		eqc.append(1001)
    	else:
      		eqc.append(len(d[i]['solutions'][tempu]['eq']))
  keys = np.sort(np.unique(eqc))
  c = {}
  for k in keys:
    c[k] = len(np.where(eqc == k)[0]) #key is equiv class size and value is frequency
  print "\n"
  return c

def makeA(u):
  ulistofalldensities = {}
  i = 0
  usz = set() #set of all equivalence class sizes that we have seen
  for fileitem in l: #each file is a dif density
    d = zkl.load(fileitem)
    c = get_counts(d,u)
    ulistofalldensities[densities[i]] = c
    i = i + 1
    for v in c:
      usz.add(v)
  print ulistofalldensities

  #print usz
  for density in ulistofalldensities:
    for size in usz:
      if not size in ulistofalldensities[density]:
        ulistofalldensities[density][size] = 0

  A = []
  for density in densities:
    A.append([ulistofalldensities[density][x] for x in np.sort(ulistofalldensities[density].keys())])
  return A



#############################################################################



#details for graphing all subplots

d_widths = [.5]*len(densities)
d_labels = []
for density in densities:
    d_labels.append(str(density))



#################################################################################
#graph subplot for u  = 2
A2 = makeA(1)
mycolorlistu2 = [(0.9769448735268946, 0.6468696110452877, 0.2151452804329661), (0.37645505989354233, 0.6875228836084111, 0.30496111115768654), (0.6151274326753975, 0.496189476149738, 0.15244053646953548), (0.1562085876188265, 0.44786703170340336, 0.9887241674046707), (0.4210506028639077, 0.2200011667972023, 0.37841949185273394), (0.7728656344058752, 0.47367399916287833, 0.026245548153039366), (0.904005064928743, 0.3038725882767085, 0.9399279068775889), (0.39140782566655674, 0.761012099948101, 0.7475874114794775), (0.0965359591761811, 0.43566457484639054, 0.9375581594394308), (0.859944654091911, 0.208070821188862, 0.8893517695418856), (0.022700048163251885, 0.658455757390323, 0.45194508876647577), (0.5934259725250017, 0.6259544064286037, 0.8943937276483482), (0.1248759682295419, 0.1286185769691658, 0.6973677590395778), (0.1834548561930609, 0.8625908063396674, 0.2808367027257399), (0.7072265637451247, 0.795648339142106, 0.4662593453344923), (0.9522043509564118, 0.8383482335114356, 0.04624824811210648), (0.2509444122476855, 0.723665792376911, 0.1685356796751546), (0.255653326552158, 0.5961600354559602, 0.117780460753558), (0.9439367271803931, 0.9189366721892608, 0.7886855210193017), (0.8995777049552036, 0.8978927956586498, 0.7239642220024304), (0.40222983289275105, 0.9345684739537153, 0.566491195073673), (0.0513937324768556, 0.7727016141102293, 0.599682730400552), (0.32532392896062434, 0.6771986595824758, 0.6804464385760941), (0.9525519916784567, 0.7511035215433497, 0.8304180841797634), (0.21112416388960142, 0.7892901500348418, 0.5183165258146284), (0.5444611719681884, 0.7322772657961953, 0.17556307524789427), (0.9061819404330758, 0.4819595022335398, 0.7355265783007073), (0.26867538636637267, 0.517149856740674, 0.6730945199483196), (0.1969119108920101, 0.7691832236626523, 0.8581500511883019), (0.24317906305210757, 0.07199642368662595, 0.5671977646914638), (0.5526489158835673, 0.9263316945221866, 0.7708982914425199), (0.7185498068459529, 0.42178934105231114, 0.7170822708612701), (0.1948591895527063, 0.8844404174150958, 0.20739570597562296), (0.5169187761292617, 0.0523993091218857, 0.1220206501097675), (0.15440849286794844, 0.5109256317494821, 0.918663018768346), (0.5429750037107149, 0.251605407713302, 0.6383395346264112), (0.9457583531121714, 0.41934982666062404, 0.3692802897910529), (0.7919826102084409, 0.5608948323741435, 0.8863426580950163), (0.20981445390600095, 0.30693865142032595, 0.48997043645185046)]


ax1 = plt.subplot2grid((20,7), (0,0), rowspan = 5, colspan=7)
SBG = StackedBarGrapher()
SBG.stackedBarPlot(ax1,
                   A2,
                   mycolorlistu2,
                   xLabels=d_labels,
                   yTicks=3,
                   widths=d_widths,
                   gap = 0.005,
                   scale=False
)

for i in range(len(A2)):
    Ai = [x for x in A2[i] if x>0]
    y = [x/2.0 for x in Ai]
    for j in range(len(Ai)):
        if j>0:
            yy = y[j]+np.sum(Ai[0:j])
        else:
            yy = y[j]    
        if int(Ai[j]) > 10:    
          pl.text(0.5*i-0.02,yy-1.2,str(Ai[j]),fontsize=12,zorder=10)

ax1.axes.get_xaxis().set_visible(False)
ax1.set_title('n = 5, number of graphs per u = 100',multialignment='center')
ax1.set_ylabel('u = 2',rotation = 90)





#graph subplot for u = 3
A3 = makeA(2)
mycolorlistu3 = [(0.9769448735268946, 0.6468696110452877, 0.2151452804329661), (0.37645505989354233, 0.6875228836084111, 0.30496111115768654), (0.6151274326753975, 0.496189476149738, 0.15244053646953548), (0.1562085876188265, 0.44786703170340336, 0.9887241674046707), (0.4210506028639077, 0.2200011667972023, 0.37841949185273394), (0.7728656344058752, 0.47367399916287833, 0.026245548153039366), (0.39140782566655674, 0.761012099948101, 0.7475874114794775), (0.0965359591761811, 0.43566457484639054, 0.9375581594394308), (0.5934259725250017, 0.6259544064286037, 0.8943937276483482), (0.1248759682295419, 0.1286185769691658, 0.6973677590395778), (0.9522043509564118, 0.8383482335114356, 0.04624824811210648), (0.255653326552158, 0.5961600354559602, 0.117780460753558), (0.9439367271803931, 0.9189366721892608, 0.7886855210193017), (0.8995777049552036, 0.8978927956586498, 0.7239642220024304), (0.0513937324768556, 0.7727016141102293, 0.599682730400552), (0.671347042221948, 0.44827277249822983, 0.5758028025623169), (0.2536385202352366, 0.6050891521826539, 0.20807572283377163), (0.164614727151158, 0.5684305293900335, 0.4909183445246943), (0.41106101124915306, 0.6905698281245495, 0.6635168303852723), (0.21112416388960142, 0.7892901500348418, 0.5183165258146284), (0.2687445198466347, 0.47096330276612686, 0.780276103443152), (0.35582076909521787, 0.8745064854695166, 0.3545516591571266), (0.8975192077387196, 0.4256266095653507, 0.9580605810028985), (0.9061819404330758, 0.4819595022335398, 0.7355265783007073), (0.97649181018841, 0.3806367183382917, 0.5203279005692817), (0.044363631256075564, 0.9991717511296541, 0.22719110673281473), (0.4862983226162474, 0.9266576030195525, 0.5200207123141651), (0.2185374290911694, 0.6863672034685054, 0.28906788161042285), (0.8823494781169269, 0.8602854575796756, 0.46655973657031047), (0.8918452889529781, 0.3489446890522606, 0.5363393265500108), (0.8606249030204752, 0.006002024038369358, 0.8926479044904958), (0.39140968224876604, 0.20490073625104321, 0.49724364222766826), (0.15440849286794844, 0.5109256317494821, 0.918663018768346), (0.6802337626345111, 0.3952319177096246, 0.957791287813846), (0.669049415010293, 0.6601594798409904, 0.369033618842457), (0.6418660472107188, 0.19387172503903427, 0.08253445229983347), (0.9171177970189475, 0.757040163551673, 0.41473173765212656), (0.8514416943359722, 0.26776326080817003, 0.42656484426039165), (0.563959718408767, 0.16805776410240414, 0.236863510939043), (0.6077128018278273, 0.7114298585206303, 0.01165510253268031), (0.41580848148241223, 0.04618512467563829, 0.5158900558093626), (0.5344828886572797, 0.626311982198099, 0.8734018104264674), (0.4715901668807123, 0.22691497224040869, 0.8324257857284412), (0.606928934759279, 0.18954053420608696, 0.3971704554820378), (0.43828274661059363, 0.6307222593349302, 0.2340955475172376), (0.3875743287260326, 0.4336592646622611, 0.18786909694048148), (0.4911512658500157, 0.36885328979544607, 0.16493510014450008), (0.02984494188497888, 0.8162917062597478, 0.11484767161474563), (0.06373733176053709, 0.05828579994431693, 0.5276576646723787), (0.7846373211228662, 0.7094511532689909, 0.20386715797977129), (0.42060664576563456, 0.812783716104773, 0.07824296338425984), (0.8652356351587394, 0.853185868084153, 0.32231981978946056), (0.33249893828748023, 0.5574402721532626, 0.048355320787969336), (0.4417364105098468, 0.4369407216947674, 0.16241194628082245), (0.8107807623400896, 0.3099877573648637, 0.435731436486533), (0.006325524188502296, 0.18950234542615196, 0.23926750268622843), (0.5527651291905299, 0.5746966496279889, 0.43171636233396815), (0.5344327591142222, 0.5257392860926776, 0.5651227710291419), (0.7028212878281531, 0.93714673712197, 0.15804097206531542), (0.678031976251275, 0.7704555463533739, 0.28812460936085504), (0.26236788359719754, 0.17529748970429215, 0.6484863208369795), (0.115824596742378, 0.34992381657932414, 0.6153763241914337), (0.6128682578052749, 0.25593752365317624, 0.4275747216942438), (0.3984406181611808, 0.06088973642585682, 0.8766893533007929), (0.23548730894370484, 0.585140605722368, 0.945897539314606), (0.1818978404565259, 0.04768290319210333, 0.892897952279543), (0.24297204338780298, 0.652460465843344, 0.4921529562664547), (0.44375448350658886, 0.9279067963165427, 0.6842608816352503), (0.7023622379209911, 0.17828223889557793, 0.10718503235353127), (0.8259245621037714, 0.42802889162999047, 0.38258746898149265), (0.4945168465360159, 0.40294280549563233, 0.374481199283637), (0.08719382781846197, 0.7675988748519565, 0.8076046247368227), (0.74224238574635, 0.23427758549595035, 0.7699090417859882), (0.09726368948435926, 0.8369969882905206, 0.07986516857033343), (0.9289417957628747, 0.21033188329558805, 0.44865447618425736), (0.38997444066817866, 0.9781779063852679, 0.874217562859495), (0.705147751703358, 0.5702924839652445, 0.24312377606293833), (0.8178345478004484, 0.981435239104708, 0.6544046775407857), (0.4320231702054077, 0.07210261858206857, 0.07920415400870395), (0.5627424217341767, 0.1968727734442548, 0.359595067651303), (0.20981445390600095, 0.30693865142032595, 0.48997043645185046), (0.9241714458529445, 0.8143896488420276, 0.7663922292951993), (0.188530160711723, 0.838939180757721, 0.0755369071561598)]


ax2 = plt.subplot2grid((20,7), (5,0), rowspan = 5, colspan=7)
SBG = StackedBarGrapher()
SBG.stackedBarPlot(ax2,
                   A3,
                   mycolorlistu3,
                   xLabels=d_labels,
                   yTicks=3,
                   widths=d_widths,
                   gap = 0.005,
                   scale=False
)

for i in range(len(A3)):
    Ai = [x for x in A3[i] if x>0]
    y = [x/2.0 for x in Ai]
    for j in range(len(Ai)):
        if j>0:
            yy = y[j]+np.sum(Ai[0:j])
        else:
            yy = y[j]    
        if int(Ai[j]) > 9:    
          pl.text(0.5*i-0.02,yy-1.2,str(Ai[j]),fontsize=12,zorder=10)

ax2.axes.get_xaxis().set_visible(False)
ax2.set_ylabel('number of graphs \n u = 3',rotation = 90)








#graph subplot for u = 4
A4 = makeA(3)
mycolorlistu4 = [(0.9769448735268946, 0.6468696110452877, 0.2151452804329661), (0.37645505989354233, 0.6875228836084111, 0.30496111115768654), (0.6151274326753975, 0.496189476149738, 0.15244053646953548), (0.1562085876188265, 0.44786703170340336, 0.9887241674046707), (0.4210506028639077, 0.2200011667972023, 0.37841949185273394), (0.904005064928743, 0.3038725882767085, 0.9399279068775889), (0.022700048163251885, 0.658455757390323, 0.45194508876647577), (0.5934259725250017, 0.6259544064286037, 0.8943937276483482), (0.1834548561930609, 0.8625908063396674, 0.2808367027257399), (0.9522043509564118, 0.8383482335114356, 0.04624824811210648), (0.8995777049552036, 0.8978927956586498, 0.7239642220024304), (0.2556726736236199, 0.2104548430331603, 0.8512080303034044), (0.2646659319053375, 0.5140308942688593, 0.6505540444073039), (0.32532392896062434, 0.6771986595824758, 0.6804464385760941), (0.5151791425316585, 0.8441590818250184, 0.22176363661186171), (0.1969119108920101, 0.7691832236626523, 0.8581500511883019), (0.4862983226162474, 0.9266576030195525, 0.5200207123141651), (0.2185374290911694, 0.6863672034685054, 0.28906788161042285), (0.4655502203943791, 0.10944303345078243, 0.8832444508999896), (0.08031539146038547, 0.0017551759017343516, 0.39781039742275426), (0.14893028546117915, 0.2517878082271714, 0.9109681753229321), (0.8377118797624784, 0.2403077742096449, 0.75346596060324), (0.15440849286794844, 0.5109256317494821, 0.918663018768346), (0.6077128018278273, 0.7114298585206303, 0.01165510253268031), (0.1150427472614931, 0.05331753045182375, 0.24703683509993657), (0.4470311514274178, 0.6239963553063219, 0.734273183840712), (0.3907724996607741, 0.4380493949515427, 0.5452076825402125), (0.43828274661059363, 0.6307222593349302, 0.2340955475172376), (0.1593068931590369, 0.0880065106921683, 0.18999011972464552), (0.33249893828748023, 0.5574402721532626, 0.048355320787969336), (0.716863081724063, 0.11278804629734518, 0.6916295358238204), (0.19727774650639862, 0.39968360902677436, 0.9650752912041951), (0.5841862317537572, 0.5037085094192894, 0.1285352060375441), (0.26236788359719754, 0.17529748970429215, 0.6484863208369795), (0.3498800067565817, 0.08534208657463194, 0.06750360841059844), (0.8785837493737819, 0.22828450747015672, 0.07405579543608687), (0.2945126748939565, 0.5777632907736129, 0.9200584781435479), (0.4817410722891594, 0.09467528600649266, 0.5375593747271779), (0.23059187176367324, 0.2657253302615584, 0.3643423610154106), (0.9307905999170635, 0.3100506522354814, 0.770015555654754), (0.269475159724161, 0.45498770799919086, 0.644805947216883), (0.8178345478004484, 0.981435239104708, 0.6544046775407857), (0.5627424217341767, 0.1968727734442548, 0.359595067651303), (0.20981445390600095, 0.30693865142032595, 0.48997043645185046), (0.9241714458529445, 0.8143896488420276, 0.7663922292951993), (0.188530160711723, 0.838939180757721, 0.0755369071561598)]


ax3 = plt.subplot2grid((20,7), (10,0), rowspan = 5, colspan=7)
SBG = StackedBarGrapher()
SBG.stackedBarPlot(ax3,
                   A4,
                   mycolorlistu4,
                   xLabels=d_labels,
                   yTicks=3,
                   widths=d_widths,
                   gap = 0.005,
                   scale=False
)

for i in range(len(A4)):
    Ai = [x for x in A4[i] if x>0]
    y = [x/2.0 for x in Ai]
    for j in range(len(Ai)):
        if j>0:
            yy = y[j]+np.sum(Ai[0:j])
        else:
            yy = y[j]    
        if int(Ai[j]) > 6:    
          pl.text(0.5*i-0.02,yy-1.2,str(Ai[j]),fontsize=12,zorder=10)

ax3.set_xticklabels(d_labels,rotation=0)
ax3.set_xlabel('densities')
ax3.set_ylabel('u = 4')










###################################LEGEND################################################

#ax4 = plt.subplot2grid((20,7), (13,2),colspan=2,rowspan = 2)
ax4 = plt.subplot2grid((20,7), (16,2),colspan=2,rowspan = 3)
bararray = [1,2,3]
eqc_labels = ['1','2','4']
my_legend_color_list = [
mycolorlistu4[0],
mycolorlistu4[1],
mycolorlistu4[2]]
ax4.bar(bararray,[.1]*3,color=my_legend_color_list,align='center')
ax4.set_xticks(np.arange(min(bararray), max(bararray)+1, 1.0))
ax4.axes.get_yaxis().set_visible(False)
ax4.set_xticklabels(eqc_labels)
ax4.set_axis_bgcolor('w')

#ax5 = plt.subplot2grid((20,7), (13,4),colspan=2,rowspan=2)
ax5 = plt.subplot2grid((20,7), (16,4),colspan=2,rowspan=3)
bararray = [4,5,6]
eqc_labels = ['999','>1000','superclique']
my_legend_color_list = [
mycolorlistu4[-3],
mycolorlistu4[-2],
mycolorlistu4[-1]]
ax5.bar(bararray,[1]*3,color=my_legend_color_list,align='center')
ax5.set_xticks(np.arange(min(bararray), max(bararray)+1, 1.0))
ax5.axes.get_yaxis().set_visible(False)
ax5.set_xticklabels(eqc_labels)
ax5.set_axis_bgcolor('w')


plt.text(3.2,0,"...")
plt.text(-3,0,"Equivalence Class Size")








plt.tight_layout()
plt.savefig('sb_nodes_5.svgz')
plt.show()